# üîê CONFIGURACI√ìN DEL BACKEND - API KEYS Y TOKENS
# =================================================

import os
from typing import Optional

class Settings:
    """Configuraci√≥n centralizada del backend"""
    
    # üîí SEGURIDAD (REQUERIDO)
    JWT_SECRET: str = os.environ.get('JWT_SECRET', 'cambiar-en-produccion-clave-super-secreta-32-caracteres')
    JWT_ALGORITHM: str = 'HS256'
    JWT_EXPIRATION_MINUTES: int = 60 * 24 * 7  # 7 d√≠as
    
    # üóÑÔ∏è BASE DE DATOS (REQUERIDO)
    MONGO_URL: str = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
    DB_NAME: str = os.environ.get('DB_NAME', 'lexi_db')
    
    # üåê CORS (IMPORTANTE para producci√≥n)
    CORS_ORIGINS: list = os.environ.get('CORS_ORIGINS', '*').split(',')
    
    # üìß EMAIL SERVICE (OPCIONAL - para notificaciones)
    # ‚ö†Ô∏è COLOCAR TUS API KEYS AQU√ç:
    EMAIL_SERVICE: str = os.environ.get('EMAIL_SERVICE', 'none')  # "sendgrid", "mailgun", "ses", "none"
    
    # SendGrid
    SENDGRID_API_KEY: Optional[str] = os.environ.get('SENDGRID_API_KEY')  # ‚Üê COLOCAR tu SendGrid key: "SG.xxxxx"
    
    # Mailgun  
    MAILGUN_API_KEY: Optional[str] = os.environ.get('MAILGUN_API_KEY')    # ‚Üê COLOCAR tu Mailgun key
    MAILGUN_DOMAIN: Optional[str] = os.environ.get('MAILGUN_DOMAIN')      # ‚Üê COLOCAR tu dominio
    
    # Configuraci√≥n de emails
    FROM_EMAIL: str = os.environ.get('FROM_EMAIL', 'noreply@tu-dominio.com')     # ‚Üê Tu email de env√≠o
    NOTIFY_EMAIL: str = os.environ.get('NOTIFY_EMAIL', 'admin@tu-dominio.com')   # ‚Üê Email para recibir notificaciones
    
    # üîó INTEGRACIONES EXTERNAS (OPCIONAL)
    
    # Facebook/Meta Ads API
    FACEBOOK_APP_ID: Optional[str] = os.environ.get('FACEBOOK_APP_ID')           # ‚Üê COLOCAR tu App ID
    FACEBOOK_APP_SECRET: Optional[str] = os.environ.get('FACEBOOK_APP_SECRET')   # ‚Üê COLOCAR tu App Secret
    
    # Stripe (Pagos)
    STRIPE_SECRET_KEY: Optional[str] = os.environ.get('STRIPE_SECRET_KEY')       # ‚Üê COLOCAR tu Stripe Secret: "sk_test_xxxxx"
    STRIPE_WEBHOOK_SECRET: Optional[str] = os.environ.get('STRIPE_WEBHOOK_SECRET') # ‚Üê COLOCAR tu Webhook Secret
    
    # Analytics
    GOOGLE_ANALYTICS_ID: Optional[str] = os.environ.get('GOOGLE_ANALYTICS_ID')   # ‚Üê COLOCAR tu GA ID: "G-XXXXXXXXXX"
    
    # üöÄ AMBIENTE
    ENVIRONMENT: str = os.environ.get('ENVIRONMENT', 'development')  # "development" o "production"
    DEBUG: bool = ENVIRONMENT == 'development'
    
    # üìä CONFIGURACI√ìN DE LA APLICACI√ìN
    MAX_LEADS_PER_EMAIL: int = 5  # M√°ximo leads por email por d√≠a
    MAX_CONTACT_MESSAGES_PER_IP: int = 10  # M√°ximo mensajes de contacto por IP por d√≠a

# Instancia global de configuraci√≥n
settings = Settings()

# üîß VALIDACI√ìN DE CONFIGURACI√ìN
def validate_config():
    """Valida que la configuraci√≥n est√© correcta"""
    errors = []
    
    # Validar configuraci√≥n requerida
    if settings.JWT_SECRET == 'cambiar-en-produccion-clave-super-secreta-32-caracteres':
        if settings.ENVIRONMENT == 'production':
            errors.append("‚ùå JWT_SECRET debe cambiarse en producci√≥n")
        else:
            print("‚ö†Ô∏è  JWT_SECRET usando valor por defecto (OK para desarrollo)")
    
    if not settings.MONGO_URL:
        errors.append("‚ùå MONGO_URL es requerido")
    
    # Validar configuraci√≥n de email si est√° habilitada
    if settings.EMAIL_SERVICE == 'sendgrid' and not settings.SENDGRID_API_KEY:
        errors.append("‚ùå SENDGRID_API_KEY es requerido para SendGrid")
    
    if settings.EMAIL_SERVICE == 'mailgun' and (not settings.MAILGUN_API_KEY or not settings.MAILGUN_DOMAIN):
        errors.append("‚ùå MAILGUN_API_KEY y MAILGUN_DOMAIN son requeridos para Mailgun")
    
    # Mostrar configuraci√≥n actual
    print("üîß CONFIGURACI√ìN ACTUAL:")
    print(f"   ‚Ä¢ Ambiente: {settings.ENVIRONMENT}")
    print(f"   ‚Ä¢ Base de datos: {'‚úÖ Configurada' if settings.MONGO_URL else '‚ùå No configurada'}")
    print(f"   ‚Ä¢ Email service: {settings.EMAIL_SERVICE}")
    print(f"   ‚Ä¢ CORS origins: {settings.CORS_ORIGINS}")
    
    if errors:
        print("‚ùå ERRORES DE CONFIGURACI√ìN:")
        for error in errors:
            print(f"   {error}")
        if settings.ENVIRONMENT == 'production':
            raise Exception("Configuraci√≥n inv√°lida para producci√≥n")
    else:
        print("‚úÖ Configuraci√≥n v√°lida")
